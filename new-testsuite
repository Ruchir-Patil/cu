#!/usr/bin/env python

import re
import os

regression_dir = 'regressions/'
main_c = 'main.c'
makefile = 'Makefile'
makefile_var = 'OBJS'
tsname = None # Name of testsuite


inc_pat = re.compile(r'^\#include .*$')
ts_start_pat = re.compile(r'([ \t]*)TEST_SUITES.*{.*$')
ts_add_pat = re.compile(r'^([ \t]*)TEST_SUITE_ADD\(.*\),.*$')

class HC(object):
    def __init__(self):
        pass

    def prepare(self):
        try:
            f = open(tsname + '.h', 'r')
            f.close()
            return False
        except:
            pass

        try:
            f = open(tsname + '.c', 'r')
            f.close()
            return False
        except:
            pass

        return True

    def do(self):
        header = open(tsname + '.h', 'w')
        header.write("""#ifndef TEST_%s
#define TEST_%s

TEST(%sSetUp);
TEST(%sTearDown);

TEST_SUITE(TS%s) {
    TEST_ADD(%sSetUp),

    TEST_ADD(%sTearDown),
    TEST_SUITE_CLOSURE
};
#endif
""" % (tsname, tsname, tsname, tsname, tsname, tsname, tsname))
        header.close();

        c = open(tsname + '.c', 'w')
        c.write("""#include "cu/cu.h"

TEST(%sSetUp)
{
}

TEST(%sTearDown)
{
}
""" % (tsname, tsname))
        c.close()



class MainC(object):
    def __init__(self, filename):
        self._fn = filename
        self._last_inc = -1
        self._ts_start = -1
        self._ts_start_prefix = ''
        self._ts_add = -1
        self._ts_add_prefix = ''
        self._content = []

    def prepare(self):
        f = open(self._fn, 'r')
        i = 0
        for line in f:
            self._content.append(line)

            match = inc_pat.match(line)
            if match is not None:
                self._last_inc = i + 1

            match = ts_start_pat.match(line)
            if match is not None:
                self._ts_start = i + 1
                self._ts_start_prefix = match.group(1)

            match = ts_add_pat.match(line)
            if match is not None:
                self._ts_add = i + 1
                self._ts_add_prefix = match.group(1)

            i += 1
        f.close()

        if (self._ts_start < 0 and self._ts_add < 0) \
           or self._last_inc < 0:
            return False
        return True

    def do(self):
        self._content.insert(self._last_inc, '#include "' + tsname + '.h"\n')
        if self._ts_add < 0:
            self._content.insert(self._ts_start + 1, '%s    TEST_SUITE_ADD(TS%s),\n' \
                                                     % (self._ts_start_prefix, tsname))
        else:
            self._content.insert(self._ts_add + 1, '%sTEST_SUITE_ADD(TS%s),\n' \
                                                   % (self._ts_add_prefix, tsname))

        f = open(self._fn, 'w')
        for line in self._content:
            f.write(line)
        f.close()

class Makefile(object):
    def __init__(self):
        self._content = []
        pass

    def prepare(self):
        ok = False
        pat = re.compile('^.*%s.*=.*$' % (makefile_var))
        f = open(makefile, 'r')
        for line in f:
            self._content.append(line)

            match = pat.match(line)
            if match is not None:
                if ok:
                    f.close()
                    return False
                ok = True

                l = self._content[-1]
                l = l.rstrip('\n')
                l = l + ' ' + tsname + '.o\n'
                self._content[-1] = l
        f.close()

        return ok

    def do(self):
        f = open(makefile, 'w')
        for line in self._content:
            f.write(line)
        f.close()


class Regression(object):
    def __init__(self):
        pass

    def prepare(self):
        return True

    def do(self):
        os.system('touch %s/TS%s.{out,err}' % (regression_dir, tsname))

if __name__ == '__main__':
    tsname = 'test'
    if tsname is not None:
        mainc = MainC(main_c)
        hc = HC()
        mf = Makefile()
        reg = Regression()
        if not mainc.prepare() \
           or not hc.prepare() \
           or not mf.prepare() \
           or not reg.prepare():
           raise

        mainc.do()
        hc.do()
        mf.do()
        reg.do()
